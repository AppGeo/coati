{
  "name": "pg-cursor",
  "version": "0.1.2",
  "description": "node-pg-cursor ==============",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "scripts": {
    "test": "node test/"
  },
  "author": {
    "name": "Brian M. Carlson"
  },
  "license": "MIT",
  "devDependencies": {
    "pg.js": "~2.8.1",
    "mocha": "~1.17.1"
  },
  "dependencies": {},
  "readme": "node-pg-cursor\n==============\n\nUse a PostgreSQL result cursor from node with an easy to use API.\n\n### why?\n\nSometimes you need to itterate through a table in chunks.  It's extremely inefficient to use hand-crafted `LIMIT` and `OFFSET` queries to do this.\nPostgreSQL provides built-in functionality to fetch a \"cursor\" to your results and page through the cursor efficiently fetching chunks of the results with full MVCC compliance.  \n\nThis actually ends up pairing very nicely with node's _asyncness_ and handling a lot of data.  PostgreSQL is rad.\n\n### example\n\n```js\nvar Cursor = require('pg-cursor')\nvar pg = require('pg')\n\npg.connect(function(err, client, done) {\n\n  //imagine some_table has 30,000,000 results where prop > 100\n  //lets create a query cursor to efficiently deal with the huge result set\n  var cursor = client.query(new Cursor('SELECT * FROM some_table WHERE prop > $1', [100]))\n  \n  //read the first 100 rows from this cursor\n  cursor.read(100, function(err, rows) {\n    if(err) {\n      //cursor error - release the client\n      //normally you'd do app-specific error handling here\n      return done(err)\n    }\n    \n    //when the cursor is exhausted and all rows have been returned\n    //all future calls to `cursor#read` will return an empty row array\n    //so if we received no rows, release the client and be done\n    if(!rows.length) return done()\n    \n    //do something with your rows\n    //when you're ready, read another chunk from\n    //your result\n    \n    \n    cursor.read(2000, function(err, rows) {\n      //I think you get the picture, yeah?\n      //if you dont...open an issue - I'd love to help you out!\n      \n      //Also - you probably want to use some sort of async or promise library to deal with paging\n      //through your cursor results.  node-pg-cursor makes no asumptions for you on that front.\n    })\n  })\n});\n```\n\n### api\n\n#### var Cursor = require('pg-cursor')\n\n#### constructor Cursor(string queryText, array queryParameters)\n\nCreates an instance of a query cursor.  Pass this instance to node-postgres [`client#query`](https://github.com/brianc/node-postgres/wiki/Client#wiki-method-query-parameterized)\n\n#### cursor#read(int rowCount, function callback(Error err, Array rows)\n\nRead `rowCount` rows from the cursor instance.  The `callback` will be called when the rows are available, loaded into memory, parsed, and converted to JavaScript types.\n\nIf the cursor has read to the end of the result sets all subsequent calls to `cursor#read` will return a 0 length array of rows.  I'm open to other ways to signal the end of a cursor, but this has worked out well for me so far.\n\n### install\n\n```sh\n$ npm install pg-cursor\n```\n___note___: this depends on _either_ `npm install pg` or `npm install pg.js`, but you __must__ be using the pure JavaScript client.  This will __not work__ with the native bindings.\n\n### license\n\nThe MIT License (MIT)\n\nCopyright (c) 2013 Brian M. Carlson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "pg-cursor@0.1.2",
  "dist": {
    "shasum": "55734a784ad1c63f1c1d12b1bbd44976cfe365f6"
  },
  "_from": "pg-cursor@~0.1.2",
  "_resolved": "https://registry.npmjs.org/pg-cursor/-/pg-cursor-0.1.2.tgz"
}
