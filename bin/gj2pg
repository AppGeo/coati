#! /usr/bin/env node

var pipeline = require('../lib'),
  path = require('path'),
  pkg = require('../package'),
  cli = require('commander'),
  Spinner = require('cli-spinner').Spinner,
  spinner = new Spinner('processing..');

function init() {
  setupCli();

  var configPath = cli.dbConfig || path.resolve('config'),
    options = {
      inputFilePath: cli.file,
      config: require(configPath),
      tableName: cli.dbTable,
      propertiesMap: cli.columnMap,
      geometryColumnName: cli.geometryColumn,
      schema: cli.dbSchema || 'public',
      operation: cli.queryOperation || 'insert',
      pk: cli.primaryKey || 'id',
      onStart: function () {
        spinner.start();
      },
      onComplete: function () {
        spinner.stop();
      }
    };

  pipeline.go(options);
}

function setupCli() {
  cli.version(pkg.version)
    .usage('[options]')
    .option('-f, --file [inputFilePath]', 'Input GeoJSON file')
    .option('-c, --db-config [configPath]', 'Database configuration file, to establish a connection')
    .option('-t, --db-table [tableName]', 'Database table into which data is to be inserted')
    .option('-S, --db-schema [schema]', 'Name of schema for database')
    .option('-m, --column-map [map]', 'Map of GeoJSON properties to table columns', map)
    .option('-g, --geometry-column [columnName]', 'Name of your table\'s geometry column')
    .option('-o, --query-operation [operation]', 'Operation to perform with data. Available options: `insert`, `update`, and `delete`, default is `insert`')
    .option('-p, --primary-key [pkColumnName]', 'Column name of Primary Key, used in conjunction with -o, when `update` or `delete`')
    .parse(process.argv);
}

function map(value) {
  if (typeof(value) === 'string') {
    if(value.indexOf(',') > -1) {
      return trim(value.split(','));
    }
    else if (value.indexOf(' ') > -1) {
      return trim(value.split(' '));
    }
    else {
      return trim([value]);
    }
  }
}

function trim(arr) {
  return arr.map(function (item) {
    return item.trim();
  });
}

module.exports = init();


